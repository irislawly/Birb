const canvas = document.getElementById("canvas");
const ctx = canvas.getContext('2d');
const FPS = 60;

let score = 0;

const leftBoundary = 0;
const topBoundary = 0;
const rightBoundary = canvas.width-100;
const bottomBoundary = canvas.height-100;
//player const
let down = false;
let up = false;
let right = false;
let left = false;
let birdSprite = 1;
const BIRDLSIDES =115;
const BIRDRSIDES =118;
const BIRD_W=136, BIRD_H=92, BIRD_SPRITES=15; //down and up animation



//object


class Player {
	constructor(x, y, speed, radius){
		this.x = x;
		this.y = y;
		this.speed = speed;
		this.radius = radius;
		}
	 update() {
		//http://bencentra.com/2017-07-11-basic-html5-canvas-games.html
			if (down && this.y < bottomBoundary+40) {
				this.y += this.speed;
			}
			else if (up && this.y  > topBoundary) {
				this.y -= this.speed;

			}
			else if (right && this.x < rightBoundary + 50) {
				this.x += this.speed;

			}
			else if (left && this.x > leftBoundary-30) {
				this.x -= this.speed;
			}
			else {
				this.x = x;
				this.y = y;

			}
		}
		draw(){
			if (down){
				var x = this.x;
				var y = this.y;
				var BIRB = new Image();
				BIRB.src = "birbfront.png"
				BIRB.addEventListener("load", function() {
				setInterval(function(){ birdSprite = (birdSprite + 1) % BIRD_SPRITES }, 1000/30);
					});
				ctx.drawImage(BIRB, birdSprite*BIRD_W,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
			/*else{
			var x = this.x;
			var y = this.y;
			var BIRB = new Image();
			BIRB.src = "birbfront.png"
			BIRB.onload = function (){
			ctx.drawImage(BIRB, 0,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
		}*/

	}
}
}




let player = new Player(300,300, 2.5, 50);
console.log(player.y);

setInterval(() => {
	player.draw();
}, 1000 / 30);

setInterval(() => {
		erase();
	player.update();
}, 1000 / 30);

////PLAYER FUNCTIONS////


function stop(){
	player.speed = 0.5;
}
function drawNormal(){
	var x = player.x;
	var y = player.y;
	var BIRB = new Image();
	BIRB.src = "birbfront.png"
	BIRB.onload = function (){
	ctx.drawImage(BIRB, 0,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
	}
}
function drawDown(){
	var x = player.x;
	var y = player.y;


	var BIRB = new Image();
	BIRB.src = "birbfront.png"
	BIRB.addEventListener("load", function() {
	setInterval(function(){ birdSprite = (birdSprite + 1) % BIRD_SPRITES }, 1000/5);
		});
	ctx.drawImage(BIRB, birdSprite*BIRD_W,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
}

function drawUp() {
	var x = player.x;
	var y = player.y;

	birdSprite = (birdSprite + 1) % BIRD_SPRITES;
	var BIRB = new Image();
	BIRB.src = "backbirb.png"
	BIRB.addEventListener("load", function() {
	setInterval(function(){ birdSprite = (birdSprite + 1) % BIRD_SPRITES },1000/5);
		});
	ctx.drawImage(BIRB, BIRD_W*birdSprite,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
}


function drawRight(){
	var x = player.x;
	var y = player.y;
	birdSprite = (birdSprite + 1) % BIRD_SPRITES;
	var BIRB = new Image();
	BIRB.src = "right.png"
	BIRB.addEventListener("load", function() {
	setInterval(function(){ birdSprite = (birdSprite + 1) % BIRD_SPRITES },1000/5);
		});
	ctx.drawImage(BIRB, BIRDRSIDES*birdSprite,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
	}

function drawLeft(){
	var x = player.x;
	var y = player.y;
	birdSprite = (birdSprite + 1) % BIRD_SPRITES;
	var BIRB = new Image();
	BIRB.src = "left.png"
	BIRB.addEventListener("load", function() {
	setInterval(function(){ birdSprite = (birdSprite + 1) % BIRD_SPRITES },1000/5);
		});
	ctx.drawImage(BIRB, BIRDLSIDES*birdSprite,0,BIRD_W,BIRD_H,x,y,BIRD_W,BIRD_H );
	}


/*
function GameOne(){
	drawScoreBoard();
	drawEgg();
	movePlayer();
	checkEggCollision();
	drawNeedle();
	updateNeedles();
	checkCactusCollision();
	checkEggCollision();
}





// collision functions:





function drawScoreBoard(){
	ctx.fillStyle = '#000000';
	ctx.font = '24px Acme';
	ctx.textAlign = 'left';
	ctx.fillText('Egg counter: ' + score, 10, 24);
}


//ending conditions
function endGameWin(){
	clearInterval(start)
	erase();
	ctx.fillstyle = "blue";
	ctx.font = '24px Arial';
	ctx.textAlign = 'center';
	ctx.fillText('You Win! All the eggs are safe! Your score is ' + score , canvas.width / 2, canvas.height / 2);
}

function endGameLose(){
	clearInterval(start)
	erase();
	ctx.fillstyle = "blue";
	ctx.font = '24px Arial';
	ctx.textAlign = 'center';
	ctx.fillText('You lose! Your score is ' + score , canvas.width / 2, canvas.height / 2);
}
*/
//extra functions
canvas.addEventListener('keydown', function(event) {
  event.preventDefault();

  console.log(event.key, event.keyCode);
  if (event.keyCode === 40) { // DOWN
    down = true;
  }
  if (event.keyCode === 38) { // UP
    up = true;
  }
  if (event.keyCode === 37) { // LEFT
    left = true;
  }
  if (event.keyCode === 39) { // RIGHT
    right = true;
  }

});

canvas.addEventListener('keyup', function(event) {
  event.preventDefault();
  if (event.keyCode === 40) { // DOWN
    down = false;
  }
  if (event.keyCode === 38) { // UP
    up = false;
  }
  if (event.keyCode === 37) { // LEFT
    left = false;
  }
  if (event.keyCode === 39) { // RIGHT
    right = false;
  }
});
